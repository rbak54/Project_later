install.packages("epimdr")
require(epimdr)
?ode
vector(80,length = 4)
vector(rep(3,3))
?vector
c(rep(3,3))
time = seq(0, 5000,by = 1/10)
temperature=15*sin(2*pi*(time-91)/365)+30
humidity=c(rep(80, length(time))
#parameters from bjornstad book and guesses- just to test functions work! not sure if this is quite right
parmssus = list(mu = 00.0001, sigma=0.25 ,alpha=0.0005, kappa0 = 25, gamma = 1/2,contact=0.7,temp=temperature,humidity=humidity, f=1/900)
]
time = seq(0, 5000,by = 1/10)
temperature=15*sin(2*pi*(time-91)/365)+30
humidity=c(rep(80, length(time))
#parameters from bjornstad book and guesses- just to test functions work! not sure if this is quite right
parmssus = list(mu = 00.0001, sigma=0.25 ,alpha=0.0005, kappa0 = 25, gamma = 1/2,contact=0.7,temp=temperature,humidity=humidity, f=1/900)
]time = seq(0, 5000,by = 1/10)
time = seq(0, 5000,by = 1/10)
time = seq(0, 5000,by = 1/10)
temperature=15*sin(2*pi*(time-91)/365)+30
humidity=c(rep(80, length(time))
humidity=c(rep(80, length(time))
humidity=c(rep(80, length=length(time))
humidity=c(rep(80, length(time)))
humidity=c(rep(80, length(time)))
#parameters from bjornstad book and guesses- just to test functions work! not sure if this is quite right
parmssus = list(mu = 00.0001, sigma=0.25 ,alpha=0.0005, kappa0 = 25, gamma = 1/2,contact=0.7,temp=temperature,humidity=humidity, f=1/900)
start = c(S = 0.999, E=0.001,I = 0.00, R = 0)
log(0)
log(1)
temp/30
temperature/30
log(0.4)
log(1-1)
temperature
temperature=15*sin(2*pi*(time-91)/365)+15
temperature
plot(time,temperature)
temperature/30
plot(time,temperature/30)
plot(time,log(1-temperature/30))
plot(time,(1-temperature/30))
MAX(1-temperature/30)
max(1-temperature/30)
min(1-temperature/30)
plot(time,(1-temperature/60)
)
plot(time,(1-temperature/60)
plot(time,(1-temperature/60))
plot(time,(1-temperature/60))
plot(time,(1-temperature/60)-0.5)
plot(time,(temperature/60)-0.5)
plot(time,(temperature/60))
min(1-temperature/60)
log(0.5)
humidity[1]
humidity[0/1]
S = 0.999
E = 0.001
I = 0.00
R = 0
mu = 00.000,
sigma = 365/5 ,
alpha = 0.0000,
gamma = 72,
f = 0,
N = 1,
nu = 0.0,
theta = 0 ,# where from,
containment = 0.5 , #where from
k = 0.03,
epsilon = 0.4, #where from
beta0 = 2 * 72
infection <- beta0 * I * S / N * (1 + epsilon * cos (2 * pi * (time - theta)) * (1 - containment * I^3 / (k^3 + I^3))
R = 0
mu = 00.000
sigma = 365/5
alpha = 0.0000
gamma = 72
f = 0
N = 1
nu = 0.0
theta = 0 # where from,
containment = 0.5  #where from
k = 0.03
epsilon = 0.4 #where from
beta0 = 2 * 72
infection <- beta0 * I * S / N * (1 + epsilon * cos (2 * pi * (time - theta)) * (1 - containment * I^3 / (k^3 + I^3))
infection <- beta0 * I * S / N * (1 + epsilon * cos (2 * pi * (time - theta))) * (1 - containment * I^3 / (k^3 + I^3))
infection <- beta0 * I * S / N * (1 + epsilon * cos (2 * pi * (time - theta))) * (1 - containment * I^3 / (k^3 + I^3))
install.packages(ncdf4)
install.packages("ncdf4")
read.csv("./Downloads/pnas.1607747113.sd01.txt")
a<-read.csv("./Downloads/pnas.1607747113.sd01.txt")
hist(a$day)
hist(a$value)
require(dplyr)
require(dplyr)
install.packages("dplyr")
require(dplyr)
require(dplyr)
require("deSolve")
require("ggplot2")
require("dpylr")
install.packages("minpack.lm")
source("../Model/modelling_functions.R")
Temperature<-seq(-10,40,length.out = 10000)
Contact_Rate_0<-cr_normal(Temperature,m = c(-10,30),stype=1,c = c(-10,40))
Contact_Rate_05<-cr_normal(Temperature,m = c(15,30),stype=1,c = c(-10,40))
Contact_Rate_1<-cr_normal(Temperature,m = c(40,30),stype=0,c = c(-10,40))
setwd("~/Documents/Project/Code/report")
source("../Model/modelling_functions.R")
Temperature<-seq(-10,40,length.out = 10000)
Contact_Rate_0<-cr_normal(Temperature,m = c(-10,30),stype=1,c = c(-10,40))
Contact_Rate_05<-cr_normal(Temperature,m = c(15,30),stype=1,c = c(-10,40))
Contact_Rate_1<-cr_normal(Temperature,m = c(40,30),stype=0,c = c(-10,40))
cols<-rainbow(n=3)
png("mismatch.png")
par(mar = c(5, 5, 3, 5))
plot(Temperature,-9.079*exp(0.085*Temperature),"s",xlab="Temperature",ylab="Growth Rate")
par(new=TRUE)
plot(Temperature,Contact_Rate_0,"l",xaxt="n",yaxt="n",ylab="",xlab="",col=cols[1],lty=1)
par(new=TRUE)
axis(side=4)
mtext("Contact Rate", side = 4, line = 3)
#legend("bottom", c("Growth Rate", "Mismatch= 0","Mismatch=  0.5","Mismatch= 1"),
#       col = c("black", cols), lty = c(1, 1,1,1))
legend("bottom", c("Growth Rate", "Mismatch= 0"),
col = c("black", cols[1]), lty = c(1, 1))
graphics.off()
