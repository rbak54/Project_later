geom_errorbar(aes(ymin=means+errors,ymax=means-errors)))
for (i in unique(correlation_df_means)){
t<-correlation_df_means[which(correlation_df_means$mismatch==i),]
plot(abs(t$lat),t$means)
}
t<-correlation_df_means_country[which(correlation_df_means_country$mismatch==i),]
for (i in unique(correlation_df_means)){
t<-correlation_df_means_country[which(correlation_df_means_country$mismatch==i),]
plot(abs(t$lat),t$means)
}
par(mfrow=c(3,2))
for (i in unique(correlation_df_means)){
t<-correlation_df_means_country[which(correlation_df_means_country$mismatch==i),]
plot(abs(t$lat),t$means)
}
for (i in unique(correlation_df_means$mismatch)){
t<-correlation_df_means_country[which(correlation_df_means_country$mismatch==i),]
plot(abs(t$lat),t$means)
}
View(correlation_df_means_country)
View(correlation_df_means_country)
par(mfrow=c(3,2))
for (i in unique(correlation_df_means_country$mismatch)){
t<-correlation_df_means_country[which(correlation_df_means_country$mismatch==i),]
plot(abs(t$lat),t$means)
}
setwd("~/Documents/Project/Code/Model")
#data and functions
source("modelling_functions.R")
require("tidyverse")
require("ggplot2")
source("latincube.R")
source("data_sorting.R")
source("gazeteer.R")
data_wider_means_summ<-read.csv("../../Data/data_wider_means_summ_POP.csv")
data_wider_summ<-read.csv("../../Data/data_wider_summ_POP.csv")
data_wider_means<-read.csv("../../Data/data_wider_means_POP.csv")
#integration  N changing
population_deyle<-read.csv("../../Data/population/API_SP.POP.TOTL_DS2_en_csv_v2_1217749/populations_sel.csv")
latlong=read.csv("../../Data/latlong/latlong_sel_short.csv")
pop<-read.csv("../../Data/population/API_SP.POP.TOTL_DS2_en_csv_v2_1217749/populations_sel.csv")
cr_climate <- function(Max_Coordinates_cr, range_C, Climate,variance_scalar) {
#finds the equation fiven temp_at_max and range_C. then finds S for given T
#uses where temp at max relates to range_C to determine stype (to determine whether lower or upper value of range_C is used to find SI)
#parameters
#m is the cooredinates where the contact rate is at a maximum
#c is 95 % confidence interval for duration
#t range_C is the T values the function is calculated for
#s type determines whether s is calculated using the upper or lower confidence interval
#find s
c_u = range_C[2]
c_l = range_C[1]
m_C = Max_Coordinates_cr[1]
m_cr = Max_Coordinates_cr[2]
if (abs(Max_Coordinates_cr[1]-range_C[1])>abs(Max_Coordinates_cr[1]-range_C[2])){
s = variance_scalar * -(c_l - m_C) / 1.96
}else{
s = variance_scalar *(c_u - m_C) / 1.96
}
#finds d at T values for given parameters (contact finds equation using duration_normal_scaled)
#t_range_C not strictly needed
#return(mean_duration(T = T,m = c(temp_at_max, max_mean_contact), c = quantile_95, T_range_C = range_C, stype=stype))
return(sqrt(2 * pi) * s * m_cr * (1 / (sqrt(2 * pi) * s))*exp((-(Climate - m_C) ^ 2) / (2 * s ^ 2)))
}
SEIR_model <- function(time, values, parms) {
#function where c changes with the climate and humidity at each timepoint
#initial values
S <- values[1]
E <- values[2]
I <- values[3]
R <- values[4]
#N <- values[5]
#parameters
#for (parameter in names(parms)){
#  assign(parameter,parms[[parameter]])
#}
#for (variable in names(Climate_Variables)){
#  assign(variable,Climate_Variables[[variable]])
#}
mu=parms[["mu"]]
sigma=parms[["sigma"]]
p=parms[["p"]]
gamma=parms[["gamma"]]
f=parms[["f"]]
#N=parms[["N"]]
nu=parms[["nu"]]
h=parms[["h"]]
epsilon=parms[["epsilon"]]
d=parms[["d"]]
Max_cr=parms[["Max_cr"]]
#climate_label=parms[["mu"]]
g=parms[["g"]]
q0=parms[["q0"]]
time_at_peak=parms[["Climate_Variables"]][["time_at_peak"]]
range_C=parms[["Climate_Variables"]][["range_C"]]
Max_Climate_cr=parms[["Climate_Variables"]][["Max_Climate_cr"]]
variance_scalar=parms[["variance_scalar"]]
#find climate given time
Climate <- Climate_Time_Function(time=time ,min=range_C[1],max=range_C[2],time_at_peak = time_at_peak)
cr_value=cr_climate(Climate =  Climate,Max_Coordinates_cr = c(Max_Climate_cr,Max_cr), range_C=range_C, variance_scalar = variance_scalar)
q_value= q_climate(q0=q0,g=g, Climate=Climate)
beta_value = beta(c_r = cr_value,q =q_value ,d = d,h =h ,epsilon =epsilon )
currentpop<-S+E+I+R
#seir model
infectives<-beta_value * I * S / (currentpop)
dS = nu * (currentpop) - infectives - mu * S + f * R
dE = infectives - (sigma + mu) * E
dI = sigma * E - (mu + gamma) * I * (1/(1-p))
dR = gamma * I - mu * R - f * R
#dS = nu * (currentpop) - beta_value * I * S / (currentpop) - mu * S + f * R
#dE = beta_value * S * I / (currentpop) - (sigma + mu) * E
#dI = sigma * E - (mu + gamma) * I * (1/(1-p))
#dR = gamma * I - mu * R - f * R
#dN = nu * N - (p/(1-p)) *(mu + gamma) * I - mu * (S + E + I + R)
list(c(dS, dE, dI, dR))
}
find_R0_function<-function(Climate,parms, Climate_Variables_Temp, max_R0_Req,variance_scalar){
#finds r0 given temperatures where peak occurs. can use this to find maximum if max_r0_req is true
#take variables from list to individual variables
for (parameter in names(parms)){
assign(parameter,parms[[parameter]])
}
for (variable in names(Climate_Variables_Temp)){
assign(variable,Climate_Variables_Temp[[variable]])
}
# max_R0_req- find all or just max?
#d and cr as functions of time
cr_value=cr_climate(Climate =  Climate,Max_Coordinates_cr = c(Max_Climate_cr,Max_cr), range_C=range_C, variance_scalar=variance_scalar)
q_value= q_climate(q0=q0,g=g, Climate=Climate)
beta_value = beta(c_r = cr_value,q =q_value ,d = d,h =h ,epsilon =epsilon )
#below finds the R0 at maximum if required
#Climate[which.max((sigma / (sigma + mu)) * beta_value/(mu + alpha + gamma))]
if (max_R0_Req =="True"){
return(max((sigma / (sigma + mu)) * beta_value / ((mu + gamma)*( 1 / ( 1 - p)))))
}else{
return(c((sigma / (sigma + mu)) * beta_value / ((mu + gamma)*( 1 / ( 1 - p )))))
}
}
integration_general<-function(parms,Z,time){
extra_cols<-9
model_means=matrix(ncol =7)
names(model_means)<-c("country","week","mismatch","meanI","meanR0","meantemp","changes")
parms_temp<-parms
parms_temp[["N"]]<-NA
parms_temp[["variance_scalar"]]=Z
# changes<-Z
#name the variable which is used in above three functions
for (location_index in 1:nrow(data_wider_means_summ)){
parms_temp[["N"]]=population_deyle[location_index,3]
start = c(S = (1-1e-4)*parms_temp[["N"]],
E = 0.00*parms_temp[["N"]],
I =(1e-4)*parms_temp[["N"]],
R = 0*parms_temp[["N"]])
if(parms[["climate_label"]]=="Temperature"){
peak_contact_seq<-seq(data_wider_means_summ[location_index,"minT"],data_wider_means_summ[location_index,"maxT"],length.out=5)
for (i in peak_contact_seq){
#difference between temperature where contact rate is highest and lowest temperature in range (i.e virus does best survivasl or virus does best contact)
#mismatch= 0 is when contact rate is highest at low temp
parms_temp[["Climate_Variables"]]= list(time_at_peak=data_wider_means_summ[location_index,"peakT"]*7,range_C=c(data_wider_means_summ[location_index,"minT"],data_wider_means_summ[location_index,"maxT"]),Max_Climate_cr=i)
mismatch=(i-parms_temp[["Climate_Variables"]][["range_C"]][1])/(parms_temp[["Climate_Variables"]][["range_C"]][2]-parms_temp[["Climate_Variables"]][["range_C"]][1])
#test time<-as.vector(read.csv("../../Results/time.csv"))[,2]
mismatch<-round(mismatch,2)
temp = ode(    y = start,    time = time,    func = SEIR_model,    parms = parms_temp)
png(paste0("../../Results/Plots/variance/model_series/",data_wider_means_summ[location_index,"country"],gsub("\\.","",mismatch),"variance",Z,".png"))
plottime(temp)
graphics.off()
temp_extra<-matrix(rep(c(location_index,data_wider_means_summ[location_index,"minT"],data_wider_means_summ[location_index,"maxT"],data_wider_means_summ[location_index,"peakT"],mismatch,NA,NA,NA,Z)),nrow=nrow(temp),ncol=extra_cols,byrow=T)
colnames(temp_extra)<-c("country","lower","upper","peak_week","mismatch","temperature","R0","week","changes")
temp_extra[,"temperature"]<-Climate_Time_Function(time = time[1:nrow(temp)],min=parms_temp[["Climate_Variables"]][["range_C"]][1],max=parms_temp[["Climate_Variables"]][["range_C"]][2],time_at_peak =parms_temp[["Climate_Variables"]][["time_at_peak"]] )
temp_extra[,"R0"]<-find_R0_function(Climate=temp_extra[c(1:nrow(temp)),"temperature"],parms=parms_temp, Climate_Variables_Temp=parms_temp[["Climate_Variables"]], max_R0_Req=F, variance_scalar = variance_scalar)
year<-ceiling((temp[,"time"])/365)
day<-(temp[,"time"]-(year-1)*365)
temp_extra[,"week"]<-ceiling(day/7)
temp_extra[,"country"]<-location_index
temp_extra[,"changes"]<-Z
temp<-cbind(temp,temp_extra)
temp<-as_tibble(temp)
#model_means_temp<- temp %>% group_by(country,week,mismatch,combination) %>% summarise(meanI=mean(I),meanR0=mean(R0),meantemp=mean(temperature),.groups="drop")
model_means_temp<- temp %>% group_by(country,week,mismatch,changes) %>% summarise(meanI=mean(I/(S+E+I+R)),meanR0=mean(R0),meantemp=mean(temperature),.groups="drop")
#    names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meantemp")
#    names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meantemp")
model_means<-bind_rows(model_means,model_means_temp)
#names(model_means)<-c("country","week","mismatch","meanI","meanR0","meantemp")
#names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meantemp")
#png(paste0("../../Results/Plots/model_series/",data_wider_means_summ[location_index,"country"],gsub("\\.","",mismatch),".png"))
#plottime(temp)
#graphics.off()
}
}
if(parms[["climate_label"]]=="RH"){
peak_contact_seq<-seq(data_wider_means_summ[location_index,"minRH"],data_wider_means_summ[location_index,"maxRH"],length.out=5)
for (i in peak_contact_seq){
#difference between relative_humidity where contact rate is highest and lowest relative_humidity in range (i.e virus does best survivasl or virus does best contact)
#mismatch= 0 is when contact rate is highest at low RH
parms_temp[["Climate_Variables"]]= list(time_at_peak=data_wider_means_summ[location_index,"peakRH"]*7,range_C=c(data_wider_means_summ[location_index,"minRH"],data_wider_means_summ[location_index,"maxRH"]),Max_Climate_cr=i)
mismatch=(i-parms_temp[["Climate_Variables"]][["range_C"]][1])/(parms_temp[["Climate_Variables"]][["range_C"]][2]-parms_temp[["Climate_Variables"]][["range_C"]][1])
#test time<-as.vector(read.csv("../../Results/time.csv"))[,2]
mismatch<-round(mismatch,2)
RH = ode(    y = start,    time = time,    func = SEIR_model,    parms = parms_temp)
temp_extra<-matrix(rep(c(location_index,data_wider_means_summ[location_index,"minRH"],data_wider_means_summ[location_index,"maxRH"],data_wider_means_summ[location_index,"peakRH"],mismatch,NA,NA,NA,changes)),nrow=nrow(RH),ncol=extra_cols,byrow=T)
colnames(temp_extra)<-c("country","lower","upper","peak_week","mismatch","relative_humidity","R0","week","changes")
temp_extra[,"relative_humidity"]<-Climate_Time_Function(time = time[1:nrow(RH)],min=parms_temp[["Climate_Variables"]][["range_C"]][1],max=parms_temp[["Climate_Variables"]][["range_C"]][2],time_at_peak =parms_temp[["Climate_Variables"]][["time_at_peak"]] )
temp_extra[,"R0"]<-find_R0_function(Climate=temp_extra[c(1:nrow(RH)),"relative_humidity"],parms=parms_temp, Climate_Variables_Temp=parms_temp[["Climate_Variables"]], max_R0_Req=F, variance_scalar = variance_scalar)
year<-ceiling((RH[,"time"])/365)
day<-(RH[,"time"]-(year-1)*365)
temp_extra[,"week"]<-ceiling(day/7)
temp_extra[,"country"]<-location_index
temp_extra[,"changes"]<-Z
RH<-cbind(RH,temp_extra)
RH<-as_tibble(RH)
model_means_temp<- RH %>% group_by(country,week,mismatch,changes) %>% summarise(meanI=mean(I),meanR0=mean(R0),meanRH=mean(relative_humidity),.groups="drop")
#    names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meanRH")
#    names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meanRH")
model_means<-bind_rows(model_means,model_means_temp)
#names(model_means)<-c("country","week","mismatch","meanI","meanR0","meanRH")
#names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meanRH")
#png(paste0("../../Results/Plots/model_series/",data_wider_means_summ[location_index,"country"],gsub("\\.","",mismatch),".png"))
#plottime(RH)
#graphics.off()
}
}
}
model_means<-model_means[-1,]
return(model_means)
}
correlations<-function(mean,country){
data_sub<-data_wider_means[which(data_wider_means$country==country),"meanflu"]
return(unname(cor.test(mean[1:52],data_sub[1:52])[4][[1]]))
}
#addidng latitude and pop info
correlation_function<-function(model_means,parms){
model_means$country<-data_wider_means_summ[model_means$country,"country"]
correlation_df<- as_tibble(model_means)  %>% group_by(country,changes,mismatch)
#  correlation_df<-na.omit(correlation_df$)
if (parms[["climate_label"]]=="Temperature"){
correlation_df <- correlation_df %>%  summarise(corsI=correlations(meanI,unique(country)),corsR=correlations(meanR0,unique(country)),maxs=max(meantemp),mins=min(meantemp),means=mean(meantemp),.groups="keep")
}
if (parms[["climate_label"]]=="RH"){
correlation_df <- correlation_df %>%  summarise(corsI=correlations(meanI,unique(country)),corsR=correlations(meanR0,unique(country)),maxs=max(meanRH),mins=min(meanRH),means=mean(meanRH),.groups="keep")
}
#correlation_df$mismatch<-as.factor(correlation_df$mismatch)
#for (i in unique(correlation_df$combination)){
#  png(paste0("../../Results/Plots/comboplots/",i,".png"))
#  toplot<-correlation_df[which(correlation_df$combination==i),]
#  plot(toplot$mismatch,toplot$cors)
#  graphics.off()
#}
#addidng latitude and pop info
matrix_extra<-as.data.frame(matrix(nrow=nrow(correlation_df),ncol=3))
colnames(matrix_extra)<-c("lat","long","pop")
for (i in 1:nrow(matrix_extra)){
matrix_extra[i,c(1:2)]<-latlong[which(latlong$V1==correlation_df$country[i]),c(3:4)]
matrix_extra[i,3]<-pop[which(pop$V1==correlation_df$country[i]),"V2"]
}
correlation_df<-as.data.frame(correlation_df)
correlation_df<-cbind(correlation_df,matrix_extra)
#correlation_df$mismatch<-as.factor(correlation_df$mismatch)
return(correlation_df)
}
std <- function(x) sd(x)/sqrt(length(x))
parms = list( mu = 2.06e-5,sigma = 0.68 ,p = 0.001, gamma =0.25,f=0.1,
N = NA, nu = 5.07e-5, h=0.25 / 24 ,epsilon= 0.05, d=4/24,Max_cr=29.97,climate_label="Temperature",
g=0.085,q0=-9.079,Climate_Variables=NA)
sims=1
time = seq(1,365*10, by=1)
#plot here
changes_range<-c(0.75,1,3,5,7,9,11)
changes_range<-c(3)
for (sss in changes_range){
Z<-sss
time = seq(1,365*10, by=1)
model_means<-integration_general(parms,Z,time)
write.csv(model_means,paste0("../../Results/fromfunction/variance/","variance",Z,parms[["climate_label"]],".csv"))
correlation_df<-correlation_function(model_means,parms)
write.csv(correlation_df,paste0("../../Results/fromfunction/variance/cors/","variance",Z,parms[["climate_label"]],"correlation_dataframe.csv"))
bests<-correlation_df %>% group_by(country) %>% summarise(best=mismatch[which.max(corsI)],.groups="keep")
correlation_df_means<-as_tibble(correlation_df) %>% group_by(mismatch) %>% mutate(means=mean(corsI),errors=std(corsI))
png(paste0("../../Results/Plots/variance/boxandwhisker","variance",Z,parms[["climate_label"]],".png"))
print(ggplot(data=correlation_df, aes(x= as.factor(mismatch),y= corsI)) +geom_boxplot())
graphics.off()
png(paste0("../../Results/Plots/variance/erros","variance",Z,parms[["climate_label"]],".png"))
print(ggplot(data=correlation_df_means, aes(x= as.factor(mismatch),y= means)) +geom_point()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)))
graphics.off()
correlation_df_means<-as_tibble(correlation_df) %>% group_by(mismatch,lat) %>% summarise(means=mean(corsI),errors=std(corsI),.groups="keep")
png(paste0("../../Results/Plots/variance/lats","variance",Z,parms[["climate_label"]],".png"))
print(ggplot(data=correlation_df_means, aes(x= abs(lat), col=as.factor(mismatch),y= means)) +geom_point()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)))
graphics.off()
correlation_df$Mismatch<-as.factor(correlation_df$mismatch)
bests<-correlation_df %>% group_by(country) %>% summarise(best=Mismatch[which.max(corsI)],.groups="keep")
correlation_df_means<-as_tibble(correlation_df) %>% group_by(Mismatch) %>% mutate(means=mean(corsI),errors=std(corsI))
pdf(paste0("../../Results/Plots/variance/boxandwhisker","variance",Z,parms[["climate_label"]],".pdf"))
print(ggplot(data=correlation_df, aes(x= Mismatch,y= corsI)) +geom_boxplot()  +theme_bw()+xlab("Mismatch") +ylab("Mean Correlation"))
graphics.off()
pdf(paste0("../../Results/Plots/variance/erros","variance",Z,parms[["climate_label"]],".pdf"))
print(ggplot(data=correlation_df_means, aes(x= Mismatch,y= means)) +geom_point()+theme_bw()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors))+xlab("Mismatch") +ylab("Mean Correlation"))
graphics.off()
correlation_df_means<-as_tibble(correlation_df) %>% group_by(Mismatch,lat) %>% summarise(means=mean(corsI),errors=std(corsI),.groups="keep")
pdf(paste0("../../Results/Plots/variance/lats","variance",Z,parms[["climate_label"]],".pdf"))
print(ggplot(data=correlation_df_means, aes(x= abs(lat), col=Mismatch,y= means)) +scale_fill_discrete(name = "Dose")+geom_point()+theme_bw()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)) +xlab("Absolute Value of Latitude") +ylab("Mean Correlation") )
graphics.off()
}
#using data
model_means<-read.csv("../../Results/fromfunction/1Temperature.csv")
source('~/Documents/Project/Code/Model/integratation variances.R')
#using data
model_means<-read.csv("../../Results/fromfunction/1Temperature.csv")
correlation_df<-correlation_function(model_means,parms)
write.csv(correlation_df,paste0("../../Results/fromfunction/cors/",sims,parms[["climate_label"]],"correlation_dataframe.csv"))
setwd("~/Documents/Project/Code/Model")
#data and functions
source("modelling_functions.R")
require("tidyverse")
require("ggplot2")
source("latincube.R")
source("data_sorting.R")
source("gazeteer.R")
data_wider_means_summ<-read.csv("../../Data/data_wider_means_summ_POP.csv")
data_wider_summ<-read.csv("../../Data/data_wider_summ_POP.csv")
data_wider_means<-read.csv("../../Data/data_wider_means_POP.csv")
#integration  N changing
population_deyle<-read.csv("../../Data/population/API_SP.POP.TOTL_DS2_en_csv_v2_1217749/populations_sel.csv")
latlong=read.csv("../../Data/latlong/latlong_sel_short.csv")
pop<-read.csv("../../Data/population/API_SP.POP.TOTL_DS2_en_csv_v2_1217749/populations_sel.csv")
integration_general<-function(parms,sims,time){
if (sims>1){
Y<-make_lhs(n=sims,parms = parms)
write.csv(Y,"../../Data/latincube.csv")
}else{
Y<-as.data.frame(matrix(c(parms[["sigma"]],parms[["h"]],parms[["mu"]],parms[["f"]]),nrow=1))
colnames(Y)<-c("sigma","h","mu","f")
print("estimated parameters used")
}
extra_cols<-9
model_means=matrix(ncol =7)
names(model_means)<-c("country","week","mismatch","meanI","meanR0","meantemp","combination")
parms_temp<-parms
parms_temp[["sigma"]]<-NA
parms_temp[["h"]]<-NA
parms_temp[["mu"]]<-NA
parms_temp[["f"]]<-NA
parms_temp[["N"]]<-NA
for (combination in 1:nrow(Y)){
parms_temp[["sigma"]]<-Y$sigma[combination]
parms_temp[["h"]]<-Y$h[combination]
parms_temp[["mu"]]<-Y$mu[combination]
parms_temp[["f"]]<-Y$f[combination]
for (location_index in 1:nrow(data_wider_means_summ)){
parms_temp[["N"]]=population_deyle[location_index,3]
start = c(S = (1-1e-4)*parms_temp[["N"]],
E = 0.00*parms_temp[["N"]],
I =(1e-4)*parms_temp[["N"]],
R = 0*parms_temp[["N"]])
if(parms[["climate_label"]]=="Temperature"){
peak_contact_seq<-seq(data_wider_means_summ[location_index,"minT"],data_wider_means_summ[location_index,"maxT"],length.out=5)
for (i in peak_contact_seq){
#difference between temperature where contact rate is highest and lowest temperature in range (i.e virus does best survivasl or virus does best contact)
#mismatch= 0 is when contact rate is highest at low temp
parms_temp[["Climate_Variables"]]= list(time_at_peak=data_wider_means_summ[location_index,"peakT"]*7,range_C=c(data_wider_means_summ[location_index,"minT"],data_wider_means_summ[location_index,"maxT"]),Max_Climate_cr=i)
mismatch=(i-parms_temp[["Climate_Variables"]][["range_C"]][1])/(parms_temp[["Climate_Variables"]][["range_C"]][2]-parms_temp[["Climate_Variables"]][["range_C"]][1])
#test time<-as.vector(read.csv("../../Results/time.csv"))[,2]
mismatch<-round(mismatch,2)
temp = ode(    y = start,    time = time,    func = SEIR_model,    parms = parms_temp)
temp_extra<-matrix(rep(c(location_index,data_wider_means_summ[location_index,"minT"],data_wider_means_summ[location_index,"maxT"],data_wider_means_summ[location_index,"peakT"],mismatch,NA,NA,NA,combination)),nrow=nrow(temp),ncol=extra_cols,byrow=T)
colnames(temp_extra)<-c("country","lower","upper","peak_week","mismatch","temperature","R0","week","combination")
temp_extra[,"temperature"]<-Climate_Time_Function(time = time[1:nrow(temp)],min=parms_temp[["Climate_Variables"]][["range_C"]][1],max=parms_temp[["Climate_Variables"]][["range_C"]][2],time_at_peak =parms_temp[["Climate_Variables"]][["time_at_peak"]] )
temp_extra[,"R0"]<-find_R0_function(Climate=temp_extra[c(1:nrow(temp)),"temperature"],parms=parms_temp, Climate_Variables_Temp=parms_temp[["Climate_Variables"]], max_R0_Req=F)
year<-ceiling((temp[,"time"])/365)
day<-(temp[,"time"]-(year-1)*365)
temp_extra[,"week"]<-ceiling(day/7)
temp_extra[,"country"]<-location_index
temp<-cbind(temp,temp_extra)
temp<-as_tibble(temp)
#model_means_temp<- temp %>% group_by(country,week,mismatch,combination) %>% summarise(meanI=mean(I),meanR0=mean(R0),meantemp=mean(temperature),.groups="drop")
model_means_temp<- temp %>% group_by(country,week,mismatch,combination) %>% summarise(meanI=mean(I/(S+E+I+R)),meanR0=mean(R0),meantemp=mean(temperature),.groups="drop")
#    names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meantemp")
#    names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meantemp")
model_means<-bind_rows(model_means,model_means_temp)
#names(model_means)<-c("country","week","mismatch","meanI","meanR0","meantemp")
#names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meantemp")
#png(paste0("../../Results/Plots/model_series/",data_wider_means_summ[location_index,"country"],gsub("\\.","",mismatch),".png"))
#plottime(temp)
#graphics.off()
}
}
if(parms[["climate_label"]]=="RH"){
peak_contact_seq<-seq(data_wider_means_summ[location_index,"minRH"],data_wider_means_summ[location_index,"maxRH"],length.out=5)
for (i in peak_contact_seq){
#difference between relative_humidity where contact rate is highest and lowest relative_humidity in range (i.e virus does best survivasl or virus does best contact)
#mismatch= 0 is when contact rate is highest at low RH
parms_temp[["Climate_Variables"]]= list(time_at_peak=data_wider_means_summ[location_index,"peakRH"]*7,range_C=c(data_wider_means_summ[location_index,"minRH"],data_wider_means_summ[location_index,"maxRH"]),Max_Climate_cr=i)
mismatch=(i-parms_temp[["Climate_Variables"]][["range_C"]][1])/(parms_temp[["Climate_Variables"]][["range_C"]][2]-parms_temp[["Climate_Variables"]][["range_C"]][1])
#test time<-as.vector(read.csv("../../Results/time.csv"))[,2]
mismatch<-round(mismatch,2)
RH = ode(    y = start,    time = time,    func = SEIR_model,    parms = parms_temp)
temp_extra<-matrix(rep(c(location_index,data_wider_means_summ[location_index,"minRH"],data_wider_means_summ[location_index,"maxRH"],data_wider_means_summ[location_index,"peakRH"],mismatch,NA,NA,NA,combination)),nrow=nrow(RH),ncol=extra_cols,byrow=T)
colnames(temp_extra)<-c("country","lower","upper","peak_week","mismatch","relative_humidity","R0","week","combination")
temp_extra[,"relative_humidity"]<-Climate_Time_Function(time = time[1:nrow(RH)],min=parms_temp[["Climate_Variables"]][["range_C"]][1],max=parms_temp[["Climate_Variables"]][["range_C"]][2],time_at_peak =parms_temp[["Climate_Variables"]][["time_at_peak"]] )
temp_extra[,"R0"]<-find_R0_function(Climate=temp_extra[c(1:nrow(RH)),"relative_humidity"],parms=parms_temp, Climate_Variables_Temp=parms_temp[["Climate_Variables"]], max_R0_Req=F)
year<-ceiling((RH[,"time"])/365)
day<-(RH[,"time"]-(year-1)*365)
temp_extra[,"week"]<-ceiling(day/7)
temp_extra[,"country"]<-location_index
RH<-cbind(RH,temp_extra)
RH<-as_tibble(RH)
model_means_temp<- RH %>% group_by(country,week,mismatch,combination) %>% summarise(meanI=mean(I),meanR0=mean(R0),meanRH=mean(relative_humidity),.groups="drop")
#    names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meanRH")
#    names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meanRH")
model_means<-bind_rows(model_means,model_means_temp)
#names(model_means)<-c("country","week","mismatch","meanI","meanR0","meanRH")
#names(model_means_temp)<-c("country","week","mismatch","meanI","meanR0","meanRH")
#png(paste0("../../Results/Plots/model_series/",data_wider_means_summ[location_index,"country"],gsub("\\.","",mismatch),".png"))
#plottime(RH)
#graphics.off()
}
}
}
}
model_means<-model_means[-1,]
return(model_means)
}
correlations<-function(mean,country){
data_sub<-data_wider_means[which(data_wider_means$country==country),"meanflu"]
return(unname(cor.test(mean[1:52],data_sub[1:52])[4][[1]]))
}
#addidng latitude and pop info
correlation_function<-function(model_means,parms){
model_means$country<-data_wider_means_summ[model_means$country,"country"]
correlation_df<- as_tibble(model_means)  %>% group_by(country,combination,mismatch)
#  correlation_df<-na.omit(correlation_df$)
if (parms[["climate_label"]]=="Temperature"){
correlation_df <- correlation_df %>%  summarise(corsI=correlations(meanI,unique(country)),corsR=correlations(meanR0,unique(country)),maxs=max(meantemp),mins=min(meantemp),time_max=which.max(meantemp),means=mean(meantemp),.groups="keep")
}
if (parms[["climate_label"]]=="RH"){
correlation_df <- correlation_df %>%  summarise(corsI=correlations(meanI,unique(country)),corsR=correlations(meanR0,unique(country)),maxs=max(meanRH),mins=min(meanRH),time_max=which.max(meanRH),means=mean(meanRH),.groups="keep")
}
#correlation_df$mismatch<-as.factor(correlation_df$mismatch)
#for (i in unique(correlation_df$combination)){
#  png(paste0("../../Results/Plots/comboplots/",i,".png"))
#  toplot<-correlation_df[which(correlation_df$combination==i),]
#  plot(toplot$mismatch,toplot$cors)
#  graphics.off()
#}
#addidng latitude and pop info
matrix_extra<-as.data.frame(matrix(nrow=nrow(correlation_df),ncol=3))
colnames(matrix_extra)<-c("lat","long","pop")
for (i in 1:nrow(matrix_extra)){
matrix_extra[i,c(1:2)]<-latlong[which(latlong$V1==correlation_df$country[i]),c(3:4)]
matrix_extra[i,3]<-pop[which(pop$V1==correlation_df$country[i]),"V2"]
}
correlation_df<-as.data.frame(correlation_df)
correlation_df<-cbind(correlation_df,matrix_extra)
#correlation_df$mismatch<-as.factor(correlation_df$mismatch)
return(correlation_df)
}
std <- function(x) sd(x)/sqrt(length(x))
parms = list( mu = 2.06e-5,sigma = 0.68 ,p = 0.001, gamma =0.25,f=0.1,
N = NA, nu = 5.07e-5, h=0.25 / 24 ,epsilon= 0.05, d=4/24,Max_cr=29.97,climate_label="Temperature",
g=0.085,q0=-9.079,Climate_Variables=NA)
sims_range<-c(1)
#using data
model_means<-read.csv("../../Results/fromfunction/1Temperature.csv")
correlation_df<-correlation_function(model_means,parms)
write.csv(correlation_df,paste0("../../Results/fromfunction/cors/",sims,parms[["climate_label"]],"correlation_dataframe.csv"))
bests<-correlation_df %>% group_by(country) %>% summarise(best=mismatch[which.max(corsI)],.groups="keep")
correlation_df_means<-as_tibble(correlation_df) %>% group_by(mismatch) %>% summarise(means=mean(corsI),errors=std(corsI),.groups="keep")
correlation_df_means_country<-as_tibble(correlation_df) %>% group_by(mismatch,lat,maxs,mins,time_max,pop) %>% summarise(means=mean(corsI),errors=std(corsI),.groups="keep")
print(ggplot(data=correlation_df, aes(x= as.factor(mismatch),y= corsI)) +geom_boxplot())
print(ggplot(data=correlation_df_means, aes(x= as.factor(mismatch),y= means)) +geom_point()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)))
print(ggplot(data=correlation_df_means_country, aes(x= abs(lat), col=as.factor(mismatch),y= means)) +geom_point()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)))
print(ggplot(data=correlation_df, aes(x= mismatch,y= corsI)) +geom_boxplot()  +theme_bw()+xlab("Mismatch") +ylab("Mean Correlation"))
print(ggplot(data=correlation_df_means, aes(x= as.factor(mismatch),y= means)) +geom_point()+theme_bw()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors))+xlab("Mismatch") +ylab("Mean Correlation"))
print(ggplot(data=correlation_df_means_country, aes(x= abs(lat), col=as.factor(mismatch),y= means))+geom_point()+theme_bw()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)) +xlab("Absolute Value of Latitude") +ylab("Mean Correlation") )
print(ggplot(data=correlation_df_means_country, aes(x= abs(lat) , col=as.factor(mismatch),y=maxs-mins))+geom_point()+theme_bw()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)) )
print(ggplot(data=correlation_df_means, aes(x= as.factor(mismatch),y= means)) +geom_point()+theme_bw()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors))+xlab("Mismatch") +ylab("Mean Correlation"))
print(ggplot(data=correlation_df_means_country, aes(x= abs(lat), col=as.factor(mismatch),y= means))+geom_point()+theme_bw()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)) +xlab("Absolute Value of Latitude") +ylab("Mean Correlation") )
print(ggplot(data=correlation_df_means_country, aes(x= abs(lat) , col=as.factor(mismatch),y=maxs-mins))+geom_point()+theme_bw()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)) )
print(ggplot(data=correlation_df_means_country, aes(y=means , col=as.factor(mismatch),x=maxs-mins))+geom_point()+theme_bw()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)))
print(ggplot(data=correlation_df_means_country, aes(x= abs(lat) , y=means, col=log(pop)))+geom_point()+theme_bw()+
geom_errorbar(aes(ymin=means+errors,ymax=means-errors)))
par(mfrow=c(3,2))
for (i in unique(correlation_df_means_country$mismatch)){
t<-correlation_df_means_country[which(correlation_df_means_country$mismatch==i),]
plot(abs(t$lat),t$means)
}
setwd("~/Documents/Project/Code/data manipulation")
source('~/Documents/Project/Code/data manipulation/edit deyle data.R')
View(latlong)
View(latlong)
for (location in unique(data_influenza_full_years$country)){
temp<-data_influenza_full_years[which(data_influenza_full_years$country==location),]
temp<-temp[which(temp$variable=="flu"),]
temp$index_week<-seq(1,nrow(temp),by=1)
week_1<-temp[which(temp$week==1),]
temp<-temp[which(temp$value!="NaN"),]
png(paste0("../../Results/Plots/country_flu/",location,".png"))
plot(temp$index_week,temp$value,cex=0.5)
abline(v=unique(week_1$index_week),col="red")
graphics.off()
}
